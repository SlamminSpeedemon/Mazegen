import javax.swing.*;
import java.util.function.ToIntFunction;

public class InfoGetUI extends javax.swing.JFrame {


    /**
     * Creates new form NewJFrame
     */
    public InfoGetUI() {
        initComponents();
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        rowTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        colTextField = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(526, 526));
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jLabel3.setText("Rows: ");

        rowTextField.setText("30");

        jLabel4.setText("Columns:");

        colTextField.setText("60");

        jCheckBox1.setText("Scrolling View");
        jCheckBox1.setToolTipText("Moves screen as character moves");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scrollCheckBox(evt);
            }
        });

        jCheckBox2.setText("Optimize");
        jCheckBox2.setToolTipText("Only avaliable for non scrolling view");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optimizedCheckBox(evt);
            }
        });

        jButton1.setText("Generate");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        //code below was generated by the NETBEANS IDE, using set up configs I put in
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jCheckBox2)
                                        .addComponent(jCheckBox1)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel3)
                                                .addGap(30, 30, 30)
                                                .addComponent(rowTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(layout.createSequentialGroup()
                                                        .addComponent(jLabel4)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addComponent(colTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel3)
                                        .addComponent(rowTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel4)
                                        .addComponent(colTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jCheckBox1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCheckBox2)
                                .addGap(37, 37, 37)
                                .addComponent(jButton1)
                                .addContainerGap(21, Short.MAX_VALUE))
        );
        //code above was generated by IDE

        jCheckBox2.setSelected(true);

        pack();
    }// </editor-fold>

    private void formKeyPressed(java.awt.event.KeyEvent evt) {
        //function is a debugger for key event listener to make sure it properly responds to keystrokes
        System.out.println("Key is pressed");

    }

    private void scrollCheckBox(java.awt.event.ActionEvent evt) {
        scrolling = !scrolling;
        if (jCheckBox1.isSelected()) {
            jCheckBox2.setSelected(false);
            jCheckBox2.setText("N/A with scroll");
        } else {
            jCheckBox2.setSelected(optimized);
            jCheckBox2.setText("Optimize");
        }
    }

    private void optimizedCheckBox(java.awt.event.ActionEvent evt) {
        optimized = !optimized;
        if (jCheckBox1.isSelected()) {
            jCheckBox2.setSelected(false);
            jCheckBox2.setText("Not avaliable with scroll");
        } else {
            jCheckBox2.setSelected(optimized);
            jCheckBox2.setText("Optimize");
        }
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        //when this buttin is pressed it tries to get valid input and start the simulation
        //if not then it just starts using default configs
        try {
            rows = Integer.valueOf(rowTextField.getText());
            cols = Integer.valueOf(colTextField.getText());

            if (rows % 2 == 1) rows -= 1;
            if (cols % 2 == 1) cols -=1;
        } catch(Exception e) {
            System.out.println("got exception " + e.getMessage());
            rows = 10;
            cols = 10;
        }

        setVisible(false);

        begin(rows, cols, scrolling, optimized);

    }

    public void begin(int row, int col, boolean scrollingOn, boolean optimizeOn) {
        //Instantiate the generator class and have it genreate a maze
        MazeGenerator_RDS gen = new MazeGenerator_RDS(row,col);
        gen.generate();
        //gen.printMaze();

        //instantiate the GUI with the maze given from the generator class
        MazeUI mazeUI = new MazeUI(gen.getMaze(), scrollingOn,  optimizeOn);
        JPanel inputGetter = new InputGetter(mazeUI); //instantiates class that will get input
        mazeUI.initComponents(inputGetter);
        //passes a reference to the input getter class so the mazeUI knows who to ask for inputs
    }



    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(InfoGetUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(InfoGetUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(InfoGetUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(InfoGetUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new InfoGetUI().setVisible(true);
//            }
//        });
//    }

            //below is generated by IDE
    // Variables declaration - do not modify
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField rowTextField;
    private javax.swing.JTextField colTextField;
//above is generated by IDE
    private boolean scrolling = false;
    private boolean optimized = true;
    private int rows;
    private int cols;
    // End of variables declaration
}